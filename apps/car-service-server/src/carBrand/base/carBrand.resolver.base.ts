/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CarBrand } from "./CarBrand";
import { CarBrandCountArgs } from "./CarBrandCountArgs";
import { CarBrandFindManyArgs } from "./CarBrandFindManyArgs";
import { CarBrandFindUniqueArgs } from "./CarBrandFindUniqueArgs";
import { CreateCarBrandArgs } from "./CreateCarBrandArgs";
import { UpdateCarBrandArgs } from "./UpdateCarBrandArgs";
import { DeleteCarBrandArgs } from "./DeleteCarBrandArgs";
import { CarBrandService } from "../carBrand.service";
@graphql.Resolver(() => CarBrand)
export class CarBrandResolverBase {
  constructor(protected readonly service: CarBrandService) {}

  async _carBrandsMeta(
    @graphql.Args() args: CarBrandCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CarBrand])
  async carBrands(
    @graphql.Args() args: CarBrandFindManyArgs
  ): Promise<CarBrand[]> {
    return this.service.carBrands(args);
  }

  @graphql.Query(() => CarBrand, { nullable: true })
  async carBrand(
    @graphql.Args() args: CarBrandFindUniqueArgs
  ): Promise<CarBrand | null> {
    const result = await this.service.carBrand(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CarBrand)
  async createCarBrand(
    @graphql.Args() args: CreateCarBrandArgs
  ): Promise<CarBrand> {
    return await this.service.createCarBrand({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CarBrand)
  async updateCarBrand(
    @graphql.Args() args: UpdateCarBrandArgs
  ): Promise<CarBrand | null> {
    try {
      return await this.service.updateCarBrand({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CarBrand)
  async deleteCarBrand(
    @graphql.Args() args: DeleteCarBrandArgs
  ): Promise<CarBrand | null> {
    try {
      return await this.service.deleteCarBrand(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
