/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CarBrand as PrismaCarBrand } from "@prisma/client";

export class CarBrandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CarBrandCountArgs, "select">): Promise<number> {
    return this.prisma.carBrand.count(args);
  }

  async carBrands<T extends Prisma.CarBrandFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarBrandFindManyArgs>
  ): Promise<PrismaCarBrand[]> {
    return this.prisma.carBrand.findMany<Prisma.CarBrandFindManyArgs>(args);
  }
  async carBrand<T extends Prisma.CarBrandFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarBrandFindUniqueArgs>
  ): Promise<PrismaCarBrand | null> {
    return this.prisma.carBrand.findUnique(args);
  }
  async createCarBrand<T extends Prisma.CarBrandCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarBrandCreateArgs>
  ): Promise<PrismaCarBrand> {
    return this.prisma.carBrand.create<T>(args);
  }
  async updateCarBrand<T extends Prisma.CarBrandUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarBrandUpdateArgs>
  ): Promise<PrismaCarBrand> {
    return this.prisma.carBrand.update<T>(args);
  }
  async deleteCarBrand<T extends Prisma.CarBrandDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CarBrandDeleteArgs>
  ): Promise<PrismaCarBrand> {
    return this.prisma.carBrand.delete(args);
  }
}
